using RemoteViewing.Logging;
using System;

namespace RemoteViewing
{
    /// <summary>
    /// A log provider which will force RemoteViewing to log all its logging messages to the console. To use,
    /// call <c>RemoteViewing.Logging.LogProvider.SetCurrentLogProvider(new ConsoleLogProvider());</c>
    /// </summary>
    public class ConsoleLogProvider : ILogProvider
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConsoleLogProvider"/> class.
        /// </summary>
        public ConsoleLogProvider()
            : this(LogLevel.Debug)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConsoleLogProvider"/> class.
        /// </summary>
        /// <param name="logLevel">
        /// The desired log level.
        /// </param>
        public ConsoleLogProvider(LogLevel logLevel)
        {
            this.LogLevel = logLevel;
        }

        /// <summary>
        /// Gets or sets the current log level.
        /// </summary>
        public LogLevel LogLevel
        {
            get;
            set;
        }

        /// <inheritdoc/>
        public Logger GetLogger(string name)
        {
            return this.Logger;
        }

        /// <summary>
        /// Log a message the specified log level.
        /// </summary>
        /// <param name="logLevel">The log level.</param>
        /// <param name="messageFunc">The message function.</param>
        /// <param name="exception">An optional exception.</param>
        /// <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
        /// <returns>true if the message was logged. Otherwise false.</returns>
        public virtual bool Logger(LogLevel logLevel, Func<string> messageFunc, Exception exception = null, params object[] formatParameters)
        {
            if (logLevel < this.LogLevel)
            {
                return false;
            }

            if (messageFunc != null)
            {
                var message = string.Format(messageFunc(), formatParameters);
                Console.WriteLine($"{logLevel}: {message}");
            }

            return true;
        }

        /// <inheritdoc/>
        public IDisposable OpenMappedContext(string key, string value)
        {
            throw new NotImplementedException();
        }

        /// <inheritdoc/>
        public IDisposable OpenNestedContext(string message)
        {
            throw new NotImplementedException();
        }
    }
}
